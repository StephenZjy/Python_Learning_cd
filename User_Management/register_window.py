# -*- coding: utf-8 -*-
import os
import shutil

# Form implementation generated from reading ui file 'register_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog
from csvOperator import write_csv, read_csv


class Ui_register(QtWidgets.QDialog):
    def __init__(self, mywindow_instance):
        super().__init__()
        self.mywindow = mywindow_instance
        self.setupUi(self)

    def setupUi(self, register_window):
        register_window.setObjectName("register_window")
        register_window.resize(560, 601)
        self.username_textEdit = QtWidgets.QTextEdit(register_window)
        self.username_textEdit.setGeometry(QtCore.QRect(170, 60, 251, 41))
        self.username_textEdit.setObjectName("username_textEdit")
        self.password = QtWidgets.QLabel(register_window)
        self.password.setGeometry(QtCore.QRect(100, 160, 67, 17))
        self.password.setObjectName("password")
        self.username = QtWidgets.QLabel(register_window)
        self.username.setGeometry(QtCore.QRect(90, 70, 67, 17))
        self.username.setObjectName("username")
        self.password_textEdit = QtWidgets.QTextEdit(register_window)
        self.password_textEdit.setGeometry(QtCore.QRect(170, 150, 251, 41))
        self.password_textEdit.setObjectName("password_textEdit")
        self.confirm_password_textEdit = QtWidgets.QTextEdit(register_window)
        self.confirm_password_textEdit.setGeometry(QtCore.QRect(170, 230, 251, 41))
        self.confirm_password_textEdit.setObjectName("confirm_password_textEdit_1")
        self.confirm_password = QtWidgets.QLabel(register_window)
        self.confirm_password.setGeometry(QtCore.QRect(90, 240, 67, 17))
        self.confirm_password.setObjectName("confirm_password")
        self.tel = QtWidgets.QLabel(register_window)
        self.tel.setGeometry(QtCore.QRect(100, 320, 67, 17))
        self.tel.setObjectName("tel")
        self.tel_textEdit = QtWidgets.QTextEdit(register_window)
        self.tel_textEdit.setGeometry(QtCore.QRect(170, 310, 251, 41))
        self.tel_textEdit.setObjectName("tel_textEdit")
        self.email_textEdit = QtWidgets.QTextEdit(register_window)
        self.email_textEdit.setGeometry(QtCore.QRect(170, 400, 251, 41))
        self.email_textEdit.setObjectName("email_textEdit_")
        self.email = QtWidgets.QLabel(register_window)
        self.email.setGeometry(QtCore.QRect(100, 410, 67, 17))
        self.email.setObjectName("email")

        self.uploadButton = QtWidgets.QPushButton(register_window)
        self.uploadButton .setGeometry(QtCore.QRect(440, 70, 89, 25))
        self.uploadButton .setObjectName("upload_image")
        self.uploadButton.clicked.connect(self.upload)

        self.submitButton = QtWidgets.QPushButton(register_window)
        self.submitButton.setGeometry(QtCore.QRect(330, 490, 89, 25))
        self.submitButton.setObjectName("submitButton")
        self.submitButton.clicked.connect(self.submit)

        self.retranslateUi(register_window)
        QtCore.QMetaObject.connectSlotsByName(register_window)

    def retranslateUi(self, register_window):
        _translate = QtCore.QCoreApplication.translate
        register_window.setWindowTitle(_translate("register_window", "register"))
        self.password.setText(_translate("register_window", "密码"))
        self.username.setText(_translate("register_window", "用户名"))
        self.confirm_password.setText(_translate("register_window", "确认密码"))
        self.tel.setText(_translate("register_window", "电话"))
        self.email.setText(_translate("register_window", "邮箱"))
        self.uploadButton.setText(_translate("register_window", "上传照片"))
        self.submitButton.setText(_translate("register_window", "提交"))

    def register_info(self):
        username = self.username_textEdit.toPlainText()
        password = self.password_textEdit.toPlainText()
        confirm_password = self.confirm_password_textEdit.toPlainText()
        tel = self.tel_textEdit.toPlainText()
        email = self.email_textEdit.toPlainText()

        return username, password, confirm_password, tel, email

    def submit(self):
        pd_info = read_csv(csv_file='user_info.csv')
        username, password, _, tel, email = self.register_info()

        if username in pd_info['username'].values:
            self.show_dialog('提示', '用户名已存在')
        elif not self.check_password():
            self.show_dialog('提示', '密码和确认密码不匹配，请重新输入')
        elif not self.check_empty():
            self.show_dialog('提示', '有空白项，请填写所有必要信息')
        # elif not self.check_upload():
        #     # self.show_dialog('提示', '请上传头像')
        else:
            data = [{'username': username, 'password': password, 'tel': tel, 'email': email}]
            write_csv(data, csv_file='user_info.csv')
            self.show_dialog('提示', '注册成功')

    def show_dialog(self, title, text):
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.exec_()

    def check_password(self):
        password = self.register_info()[1]
        confirm_password = self.register_info()[2]
        return confirm_password == password

    def check_empty(self):
        return all(filed.strip() for filed in self.register_info())

    def check_upload(self):
        photo_path = os.path.join("user_photo", f"{self.username_textEdit.toPlainText()}.jpg")
        return os.path.exists(photo_path)

    def upload(self):
        options = QFileDialog.Options()
        photo_file, _ = QFileDialog.getOpenFileName(self, 'Select Image', '', 'Images (*.png *.jpg *.jpeg *.bmp *.gif);;All Files (*)',
                                                   options=options)
        _, suffix = os.path.splitext(photo_file)
        photo_path = os.path.join("user_photo", f"{self.username_textEdit.toPlainText(), suffix}")
        if photo_file:
            shutil.copy(photo_file, photo_path)
            self.show_dialog('提示', '上传成功')

    def closeEvent(self, event):
        self.mywindow.show()


